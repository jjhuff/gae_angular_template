Total: 272 samples
      39  14.3%  14.3%      115  42.3% runtime.mallocgc
      30  11.0%  25.4%       31  11.4% runtime.MSpan_Sweep
      24   8.8%  34.2%       24   8.8% scanblock
      22   8.1%  42.3%       23   8.5% settype
      15   5.5%  47.8%       15   5.5% ExternalCode
      13   4.8%  52.6%      145  53.3% github.com/ant0ine/go-json-rest/rest/trie.(*node).find
      12   4.4%  57.0%       19   7.0% runtime.mapaccess1_faststr
      10   3.7%  60.7%       17   6.2% net/url.escape
       7   2.6%  63.2%       56  20.6% cnew
       7   2.6%  65.8%        7   2.6% net/url.shouldEscape
       6   2.2%  68.0%        6   2.2% runtime.markscan
       5   1.8%  69.9%        8   2.9% hash_init
       5   1.8%  71.7%        5   1.8% runtime.memhash
       4   1.5%  73.2%        4   1.5% flushptrbuf
       4   1.5%  74.6%       40  14.7% hash_insert
       4   1.5%  76.1%       23   8.5% runtime.growslice
       4   1.5%  77.6%        4   1.5% runtime.mapaccess1_fast32
       4   1.5%  79.0%        4   1.5% runtime.markspan
       3   1.1%  80.1%        8   2.9% github.com/ant0ine/go-json-rest/rest.(*router).ofFirstDefinedRoute
       3   1.1%  81.2%       19   7.0% growslice1
       3   1.1%  82.4%        3   1.1% runtime.duffcopy
       3   1.1%  83.5%        3   1.1% runtime.fastrand1
       3   1.1%  84.6%        3   1.1% runtime.memclr
       3   1.1%  85.7%        3   1.1% runtime.memeqbody
       3   1.1%  86.8%        3   1.1% runtime.stringiter2
       3   1.1%  87.9%       13   4.8% strings.genSplit
       3   1.1%  89.0%        3   1.1% unicode.ToUpper
       2   0.7%  89.7%       29  10.7% MCentral_Grow
       2   0.7%  90.4%        2   0.7% MHeap_ReclaimList
       2   0.7%  91.2%      227  83.5% github.com/ant0ine/go-json-rest/rest.(*router).findRouteFromURL
       2   0.7%  91.9%       70  25.7% github.com/ant0ine/go-json-rest/rest/trie.(*findContext).paramsAsMap
       1   0.4%  92.3%       18   6.6% MHeap_Reclaim
       1   0.4%  92.6%        2   0.7% assertE2Tret
       1   0.4%  93.0%      228  83.8% github.com/ant0ine/go-json-rest/rest.BenchmarkCompression
       1   0.4%  93.4%      103  37.9% github.com/ant0ine/go-json-rest/rest/trie.funcÂ·002
       1   0.4%  93.8%        1   0.4% github.com/ant0ine/go-json-rest/rest/trie.splitParam
       1   0.4%  94.1%        9   3.3% makeslice1
       1   0.4%  94.5%       48  17.6% runtime.MCache_Refill
       1   0.4%  94.9%        1   0.4% runtime.MSpanList_IsEmpty
       1   0.4%  95.2%        1   0.4% runtime.atomicstore
       1   0.4%  95.6%       41  15.1% runtime.cnewarray
       1   0.4%  96.0%        1   0.4% runtime.gentraceback
       1   0.4%  96.3%        1   0.4% runtime.lock
       1   0.4%  96.7%       25   9.2% runtime.makemap
       1   0.4%  97.1%       10   3.7% runtime.makeslice
       1   0.4%  97.4%        1   0.4% runtime.memcopy32
       1   0.4%  97.8%        1   0.4% runtime.memeq
       1   0.4%  98.2%       51  18.8% runtime.new
       1   0.4%  98.5%        1   0.4% runtime.strcopy
       1   0.4%  98.9%        1   0.4% runtime.unmarkspan
       1   0.4%  99.3%        1   0.4% runtime.xchg
       1   0.4%  99.6%        7   2.6% strings.Map
       1   0.4% 100.0%       14   5.1% strings.SplitN
       0   0.0% 100.0%       29  10.7% GC
       0   0.0% 100.0%        1   0.4% MCentral_ReturnToHeap
       0   0.0% 100.0%       20   7.4% MHeap_AllocLocked
       0   0.0% 100.0%       15   5.5% System
       0   0.0% 100.0%        1   0.4% copyout
       0   0.0% 100.0%       31  11.4% github.com/ant0ine/go-json-rest/rest.escapedPath
       0   0.0% 100.0%      178  65.4% github.com/ant0ine/go-json-rest/rest/trie.(*Trie).FindRoutesAndPathMatched
       0   0.0% 100.0%       24   8.8% makemap_c
       0   0.0% 100.0%       17   6.2% net/url.(*URL).RequestURI
       0   0.0% 100.0%       46  16.9% runtime.MCentral_CacheSpan
       0   0.0% 100.0%        1   0.4% runtime.MCentral_FreeSpan
       0   0.0% 100.0%        1   0.4% runtime.MCentral_UncacheSpan
       0   0.0% 100.0%       23   8.5% runtime.MHeap_Alloc
       0   0.0% 100.0%        2   0.7% runtime.assertE2T
       0   0.0% 100.0%       16   5.9% runtime.cnew
       0   0.0% 100.0%      228  83.8% runtime.gosched0
       0   0.0% 100.0%       40  14.7% runtime.mapassign1
       0   0.0% 100.0%        5   1.8% runtime.strhash
       0   0.0% 100.0%       15   5.5% runtime.sweepone
       0   0.0% 100.0%        1   0.4% runtime.unlock
       0   0.0% 100.0%        7   2.6% strings.ToUpper
       0   0.0% 100.0%      228  83.8% testing.(*B).launch
       0   0.0% 100.0%      228  83.8% testing.(*B).runN
